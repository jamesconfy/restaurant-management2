basePath: /v1
definitions:
  forms.EditFood:
    properties:
      image:
        type: string
      menu_id:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
  forms.EditMenu:
    properties:
      category:
        type: string
      name:
        type: string
    type: object
  forms.EditOrder:
    properties:
      delivery_id:
        type: integer
      payment_id:
        type: integer
    type: object
  forms.EditTable:
    properties:
      booked:
        type: boolean
      seats:
        type: integer
    type: object
  forms.EditUser:
    properties:
      address:
        type: string
      avatar:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
    type: object
  forms.Food:
    properties:
      image:
        type: string
      menu_id:
        type: string
      name:
        minLength: 1
        type: string
      price:
        minimum: 0
        type: number
    required:
    - menu_id
    - name
    - price
    type: object
  forms.Login:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  forms.Menu:
    properties:
      category:
        minLength: 1
        type: string
      name:
        minLength: 1
        type: string
    required:
    - category
    - name
    type: object
  forms.Order:
    properties:
      table_id:
        minLength: 1
        type: string
    required:
    - table_id
    type: object
  forms.Table:
    properties:
      seats:
        minimum: 1
        type: integer
    required:
    - seats
    type: object
  forms.User:
    properties:
      address:
        type: string
      avatar:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 6
        type: string
      phone_number:
        type: string
      role:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - phone_number
    type: object
  models.Food:
    properties:
      date_created:
        type: string
      date_updated:
        type: string
      id:
        type: string
      image:
        type: string
      menu_id:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
  models.Menu:
    properties:
      category:
        type: string
      date_created:
        type: string
      date_updated:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  models.MenuFood:
    properties:
      foods:
        items:
          $ref: '#/definitions/models.Food'
        type: array
      menu:
        $ref: '#/definitions/models.Menu'
    type: object
  models.Order:
    properties:
      date_created:
        type: string
      date_updated:
        type: string
      delivery_status:
        type: string
      id:
        type: string
      payment_method:
        type: string
      table_id:
        type: string
    type: object
  models.Table:
    properties:
      booked:
        type: boolean
      date_created:
        type: string
      date_updated:
        type: string
      id:
        type: string
      number:
        type: integer
      seats:
        type: integer
    type: object
  models.User:
    properties:
      address:
        type: string
      avatar:
        type: string
      date_created:
        type: string
      date_updated:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
      role:
        type: string
    type: object
  response.ErrorMessage:
    properties:
      code:
        example: 400
        type: integer
      error: {}
      message:
        example: error when fetching
        type: string
      status:
        example: failure
        type: string
    type: object
  response.SuccessMessage:
    properties:
      code:
        example: 200
        type: integer
      data: {}
      message:
        example: fetched successfully
        type: string
      status:
        example: success
        type: string
    type: object
  se.ServiceError:
    properties:
      description:
        type: string
      error:
        type: string
      time:
        type: string
      type:
        type: integer
    type: object
host: restaurant-management.fly.dev
info:
  contact:
    email: bobdence@gmail.com
    name: Confidence James
    url: http://github.com/jamesconfy
  description: An application for management of restaurant incomings and outgoings.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Restaurant Management
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: Get home details
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      summary: Get home route
      tags:
      - Home
  /auth/clear:
    delete:
      description: Clear user auth
      produces:
      - application/json
      responses:
        "200":
          description: Logged out from all other device successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Clear Login Auth route
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login route
      parameters:
      - description: Login Details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      summary: Login route
      tags:
      - Auth
  /auth/logout:
    post:
      description: Logout user
      produces:
      - application/json
      responses:
        "200":
          description: Logged out successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Logout user route
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register route
      parameters:
      - description: Signup Details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      summary: Register route
      tags:
      - Auth
  /foods:
    get:
      consumes:
      - application/json
      description: Provide details to get all food
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Food'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      summary: Get all Food route
      tags:
      - Food
    post:
      consumes:
      - application/json
      description: Provide details to add food
      parameters:
      - description: Food details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.Food'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.Food'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Add Food route
      tags:
      - Food
  /foods/{foodId}:
    delete:
      consumes:
      - application/json
      description: Provide details to delete food
      parameters:
      - description: Food Id
        format: uuid
        in: path
        name: foodId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: food deleted successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Delete Food route
      tags:
      - Food
    get:
      consumes:
      - application/json
      description: Provide details to get food
      parameters:
      - description: Food Id
        format: uuid
        in: path
        name: foodId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.Food'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      summary: Get Food route
      tags:
      - Food
    patch:
      consumes:
      - application/json
      description: Provide details to edit food
      parameters:
      - description: Food Id
        format: uuid
        in: path
        name: foodId
        required: true
        type: string
      - description: Food details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.EditFood'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.Food'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Edit Food route
      tags:
      - Food
  /menus:
    get:
      consumes:
      - application/json
      description: Provide details to get all menu
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Menu'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      summary: Get all menu route
      tags:
      - Menu
    post:
      consumes:
      - application/json
      description: Provide details to add menu
      parameters:
      - description: Menu details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.Menu'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.Menu'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Add Menu route
      tags:
      - Menu
  /menus/{menuId}:
    delete:
      consumes:
      - application/json
      description: Provide details to delete a menu
      parameters:
      - description: Menu Id
        format: uuid
        in: path
        name: menuId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: menu deleted successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Delete menu route
      tags:
      - Menu
    get:
      consumes:
      - application/json
      description: Provide details to get menu
      parameters:
      - description: Menu Id
        format: uuid
        in: path
        name: menuId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.MenuFood'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      summary: Get menu route
      tags:
      - Menu
    patch:
      consumes:
      - application/json
      description: Provide details to edit menu
      parameters:
      - description: Menu Id
        format: uuid
        in: path
        name: menuId
        required: true
        type: string
      - description: Menu details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.EditMenu'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.Menu'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Edit menu route
      tags:
      - Menu
  /orders:
    get:
      consumes:
      - application/json
      description: Get all orders in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Order'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Get all order route
      tags:
      - Order
    post:
      consumes:
      - application/json
      description: Provide details to add an order
      parameters:
      - description: Add order form
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.Order'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.Order'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Add order route
      tags:
      - Order
  /orders/{orderId}:
    delete:
      consumes:
      - application/json
      description: Provide details to delete an order
      parameters:
      - description: Order Id
        format: uuid
        in: path
        name: orderId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: order deleted successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Delete order route
      tags:
      - Order
    get:
      consumes:
      - application/json
      description: Provide order id to get a particular order
      parameters:
      - description: Order Id
        format: uuid
        in: path
        name: orderId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.Order'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Get order route
      tags:
      - Order
    patch:
      consumes:
      - application/json
      description: Provide details to edit an order
      parameters:
      - description: Edit order form
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.EditOrder'
      - description: Order Id
        format: uuid
        in: path
        name: orderId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.Order'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Edit order route
      tags:
      - Order
  /tables:
    get:
      consumes:
      - application/json
      description: Provide details to get table
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Table'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Get all table route
      tags:
      - Table
    post:
      consumes:
      - application/json
      description: Provide details to add table
      parameters:
      - description: Table details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.Table'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.Table'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Add table route
      tags:
      - Table
  /tables/{tableId}:
    delete:
      consumes:
      - application/json
      description: Provide details to delete a table
      parameters:
      - description: Table Id
        format: uuid
        in: path
        name: tableId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: table deleted successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Delete table route
      tags:
      - Table
    get:
      consumes:
      - application/json
      description: Provide details to get table
      parameters:
      - description: Table Id
        format: uuid
        in: path
        name: tableId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.Table'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Get table route
      tags:
      - Table
    patch:
      consumes:
      - application/json
      description: Provide details to edit table
      parameters:
      - description: Table Id
        format: uuid
        in: path
        name: tableId
        required: true
        type: string
      - description: Table details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.EditTable'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.Table'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Edit table route
      tags:
      - Table
  /users:
    get:
      consumes:
      - application/json
      description: Get all users in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.User'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Get all user route
      tags:
      - User
  /users/{userId}:
    get:
      consumes:
      - application/json
      description: Get user by id
      parameters:
      - description: User Id
        format: uuid
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Get user route
      tags:
      - User
  /users/profile:
    delete:
      description: Delete user
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Delete user route
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Get user profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Get user profile route
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: Edit user in the system
      parameters:
      - description: Edit Details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/forms.EditUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessMessage'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/se.ServiceError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/se.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/se.ServiceError'
      security:
      - ApiKeyAuth: []
      summary: Edit user route
      tags:
      - User
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorisation
    type: apiKey
swagger: "2.0"
